%Algoritmo genético de la mochila
clc, clear all,close all;
gen=3;
n=8;
pob=6;
pc=0.9;
probMut=0.1;

%Generar población de forma aleatoria
P=zeros(pob,n+2);

for i=1:pob
    for k=1:n
        j=1;
        P(i,k)=round(rand);
        %Fórmula para calcular el peso
        P(i,n+1)=(P(i,j)*0.5)+(P(i,j+1)*0.1)+(P(i,j+2)*0.5)+(P(i,j+3)*0.25)+(P(i,j+4)*0.15)+(P(i,j+5)*0.15)+(P(i,j+6)*0.5)+(P(i,j+7)*0.3);
        %Evaluación en la función objetivo
        P(i,n+2)=(P(i,j)*500)+(P(i,j+1)*300)+(P(i,j+2)*100)+(P(i,j+3)*700)+(P(i,j+4)*300)+(P(i,j+5)*400)+(P(i,j+6)*500)+(P(i,j+7)*400);
    end
end

fprintf('Pob_inicial\n\n');disp(P);  

%----------------Obtener probabilidad de selección
%sumatoria
 sumatoria=0;
for i=1:pob
    j=1;
    P(i,n+2)=(P(i,j)*500)+(P(i,j+1)*300)+(P(i,j+2)*100)+(P(i,j+3)*700)+(P(i,j+4)*300)+(P(i,j+5)*400)+(P(i,j+6)*500)+(P(i,j+7)*400);
    sumatoria=sumatoria+P(i,n+2);
end
fprintf('suma_Z= ');disp(sumatoria);

Prob=[];
for i=1:pob
     Prob(i)=P(i,n+2)/sumatoria;
end
fprintf('Probabilidad= ');disp(Prob);

%--------probabilidad acumulada------------
%Probabilidad del individuo 1

Prob_acum=[];
Prob_acum(1)=Prob(1);
for i=2:pob
 
    Prob_acum(i)=Prob_acum(i-1)+Prob(i);
end 
fprintf('Prob_acum= ');disp(Prob_acum);
%Selección por torneo
%Selección de los individuos para obtener la población intermedia

%Crear un valor aleatorio cualquiera entre 0 y 1
R=[];
for i=1:pob
   R(i)=rand; 
end
fprintf('Valores aleatorios= ');disp(R);

%--------------Generar población intermedia-----------------------
pobInt=[];
for i=1:pob
   for j=1:pob
      if Prob_acum(j)>R(i) %si calificacion.Acum(j)>r(i) tomamos al ind. si no incrementamos j
          pobInt(i,:)=P(j,1:n); %asignamos en la posicion i (de r) al nuevo individuo de la pos. j
          break;
      end%
   end 
end

fprintf('Población Intermedia=\n\n ');disp(pobInt);

%Cruzar población
%Población cruzada
%Cruce de la población intermedia
cruz=[];
pobCruz=[];
if (mod(pob,2)~=0)%si es impar la poblacion
   pobCruz(num_ind,:)=pobInt(num_ind,:); %asignamos el ultimo elemento directamente
   veces=pob-1;
   
   for i=1:2:veces
   probCruz=rand; %obtenemos la probabilidad de cruce
   fprintf('probCruce=%f -- %f\n',probCruz,pc);
   if(probCruz<pc) %si es menor cruzamos
       ptoC=round(rand*n); %obtenemos el punto de cruce de forma aleatoria >1 & <n
      while ptoC>n-1 || ptoC<1
        ptoC=round(rand*n);
      end%end while
      fprintf('P.C.=%d\n',ptoC);
      for j=1:n
         if j>ptoC
             pobCruz(i,j)=pobInt(i+1,j);
             pobCruz(i+1,j)=pobInt(i,j);
         else
             pobCruz(i,j)=pobInt(i,j);
             pobCruz(i+1,j)=pobInt(i+1,j);
         end
      end%end for
   else
       pobCruz(i,:)=pobInt(i,:);
       pobCruz(i+1,:)=pobInt(i+1,:);
   end%end probCruz < pc
end

fprintf('Población Cruza\n');disp(pobCruz);

else
    (mod(pob,2)==0)%si es par la poblacion
   veces=pob;
for i=1:2:veces
   probCruz=rand; %obtenemos la probabilidad de cruce
   fprintf('probCruce=%f -- %f\n',probCruz,pc);
   if(probCruz<pc) %si es menor cruzamos
       ptoC=round(rand*n); %obtenemos el punto de cruce de forma aleatoria >1 & <n
      while ptoC>n-1 || ptoC<1
        ptoC=round(rand*n);
      end%end while
      fprintf('P.C.=%d\n',ptoC);
      for j=1:n
         if j>ptoC
             pobCruz(i,j)=pobInt(i+1,j);
             pobCruz(i+1,j)=pobInt(i,j);
         else
             pobCruz(i,j)=pobInt(i,j);
             pobCruz(i+1,j)=pobInt(i+1,j);
         end
      end%end for
   else
       pobCruz(i,:)=pobInt(i,:);
       pobCruz(i+1,:)=pobInt(i+1,:);
   end%end probCruz < pc
end
end
fprintf('Población Cruza\n');disp(pobCruz);    

%-----Población mutada------
pobMut=[];
for i=1:pob
   for j=1:n
      mutacion=rand;
      if(mutacion<probMut)
         fprintf('Si hay mutacion en la iter i=%d,j=%d; mutacion fue=%f\n',i,j,mutacion);
         pobMut(i,j)=(pobCruz(i,j)-1)^2;%obtenemos el contrario del binario 0=1 y 1=0
      else
          pobMut(i,j)=pobCruz(i,j);%si no pasamos como tal
      end
   end
end
fprintf('Población Mutada\n');disp(pobMut);
A=pobMut;

%-----Evaluar a los individuos mutados para saber si cumplen la restriccion-----
for i=1:pob
    for k=1:n
        j=1;
        %Fórmula para calcular el peso
        A(i,n+1)=(A(i,j)*.5)+(A(i,j+1)*.1)+(A(i,j+2)*.5)+(A(i,j+3)*.25)+(A(i,j+4)*.15)+(A(i,j+5)*.15)+(A(i,j+6)*.5)+(A(i,j+7)*.3);
        %Evaluación en la función objetivo
        A(i,n+2)=(A(i,j)*500)+(A(i,j+1)*300)+(A(i,j+2)*100)+(A(i,j+3)*700)+(A(i,j+4)*300)+(A(i,j+5)*400)+(A(i,j+6)*500)+(A(i,j+7)*400);
    end
end
fprintf('Evaluación de Población Mutada\n');disp(A);








 
